// Problem: Edit Distance
// Contest: CSES - CSES Problem Set
// URL: https://cses.fi/problemset/task/1639
// Memory Limit: 512 MB
// Time Limit: 1000 ms
// 
// Powered by CP Editor (https://cpeditor.org)

#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#define utkarsh 1
#define JAI ios_base::sync_with_stdio(false);
#define SHREE cin.tie(NULL);
#define RAM cout.tie(NULL);
using ll= long long;
using sg=string;
using lld= long double;
using ull= unsigned long long;
const lld pi= 3.141592653589793238;
const ll mod=1e9+7;
typedef pair<ll, ll> pll;
typedef vector<ll> vll;
typedef vector<pll> vpll;
typedef vector<vll> vvll;
typedef vector<string> vs;
typedef unordered_map<ll,ll> umll;
typedef map<ll,ll> mll;
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define fl(i,n) for(int i=0;i<n;i++)
#define rl(i,m,n) for(int i=n;i>=m;i--)
#define py cout<<"YES\n";
#define pm cout<<"-1\n";
#define pn cout<<"NO\n";
#define tl(n)  ll n;cin>>n;
#define ts(n)  sg n;cin>>n;
#define vr(v) v.begin(),v.end()
#define rv(v) v.end(),v.begin()
#define memz(a) memset(a, 0, sizeof(a))
#define memn(a) memset(a, -1, sizeof(a)) 
#define p(x) cout<<x<<endl;
#define flp(i,a,b) for(int i = a; i <= b; i++)

/*------------------------------Graph Moves----------------------------*/
// const int fx[]={+1,-1,+0,+0};
// const int fy[]={+0,+0,+1,-1};
// const int fx[]={+0,+0,+1,-1,-1,+1,-1,+1};   // Kings Move
// const int fy[]={-1,+1,+0,+0,+1,+1,-1,-1};  // Kings Move
// const int fx[]={-2, -2, -1, -1,  1,  1,  2,  2};  // Knights Move
// const int fy[]={-1,  1, -2,  2, -2,  2, -1,  1}; // Knights Move
/*---------------------------------------------------------------------*/
 
//Debug
#ifdef utkarsh
#define debug(x) cerr << #x<<" "; cerr<<x<<" "; cerr << endl;
#else
#define debug(x);
#endif
 
// Operator overloads
template<typename T1, typename T2> // cin >> pair<T1, T2>
istream& operator>>(istream &istream, pair<T1, T2> &p) { return (istream >> p.first >> p.second); }
template<typename T> // cin >> vector<T>
istream& operator>>(istream &istream, vector<T> &v){for (auto &it : v)cin >> it;return istream;}
template<typename T1, typename T2> // cout << pair<T1, T2>
ostream& operator<<(ostream &ostream, const pair<T1, T2> &p) { return (ostream << p.first << " " << p.second); }
template<typename T> // cout << vector<T>
ostream& operator<<(ostream &ostream, const vector<T> &c) { for (auto &it : c) cout << it << " "; return ostream; }
 
// Utility functions
template <typename T>
void print(T &&t)  { cout << t << "\n"; }
void printarr(ll arr[], ll n){fl(i,n) cout << arr[i] << " ";cout << "\n";}
template<typename T>
void printvec(vector<T>v){ll n=v.size();fl(i,n)cout<<v[i]<<" ";cout<<"\n";}
template<typename T>
ll sumvec(vector<T>v){ll n=v.size();ll s=0;fl(i,n)s+=v[i];return s;}




void square(){
    //write code here
    string s1,s2;cin>>s1>>s2;
    int n=s1.size();
    int m=s2.size();
    
    int dp[n+1][m+1];
    
    fl(i,m+1){
    	dp[0][i]=i;
    }
    fl(i,n+1){
    	dp[i][0]=i;
    }   
    
    flp(i,1,n){
    	flp(j,1,m){
    		if(s1[i-1]==s2[j-1]){
    			dp[i][j]=dp[i-1][j-1];
    		}else{
    			dp[i][j]=dp[i-1][j-1]+1;
    			dp[i][j]=min({dp[i][j],dp[i-1][j]+1,dp[i][j-1]+1});
    		}
    	}
    } 
    
    cout<<dp[n][m]<<endl;
    
    // fl(i,n+1){
    	// fl(j,m+1){
    		// cout<<dp[i][j]<<" ";
    	// }cout<<endl;
    // }
    
     
 }

int main()
{
    JAI SHREE RAM
    int n = 1;
    // cin>>n;
    while(n--){
       square();
    } 

}

