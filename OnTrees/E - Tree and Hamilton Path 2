// Problem: E - Tree and Hamilton Path 2
// Contest: AtCoder - Denso Create Programming Contest 2024（AtCoder Beginner Contest 361）
// URL: https://atcoder.jp/contests/abc361/tasks/abc361_e
// Memory Limit: 1024 MB
// Time Limit: 2000 ms
// 
// Powered by CP Editor (https://cpeditor.org)

#include <bits/stdc++.h>
using namespace std;

using ll = long long;

void f(int node,int par,vector<vector<ll>>&dp,vector<pair<int,int>>adj[]){

	vector<ll>v;
	for(auto it:adj[node]){
		if(it.first!=par){
			f(it.first,node,dp,adj);
			v.push_back(it.second+dp[it.first][0]);
		}
	}
	sort(v.begin(),v.end(),greater<ll>());
	int m=v.size();
	if(m==1){
		dp[node][0]=v[0];
		dp[node][1]=0;
	}
	if(m>1){
		dp[node][0]=v[0];
		dp[node][1]=v[0]+v[1];
	}
}

void solve() {
    int n;cin>>n;
    vector<pair<int,int>>adj[n];
    long long s=0;
    for(int i=0;i<n-1;i++){
    	int x,y,z;
    	cin>>x>>y>>z;
    	s+=(2*z);
    	x--,y--;
    	adj[x].push_back({y,z});
    	adj[y].push_back({x,z});
    }
    
    vector<vector<ll>>dp(n,vector<ll>(2,0));
    f(0,-1,dp,adj);
    ll maxi=0;
    for(int i=0;i<n;i++){
    	for(int j=0;j<2;j++){
    		maxi=max(maxi,dp[i][j]); 
    	}
    }
    cout<<s-maxi<<endl;
    
}

int main() {
    ios_base::sync_with_stdio();cin.tie(0);
    int t = 1; 
    for (int i = 0; i < t; i++) {
        solve();
    }
}
